services:
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    ports:
      - '3001:3001'
    env_file:
      - ./apps/auth/.env
    depends_on:
      - auth-db
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  accounting:
    build:
      context: .
      dockerfile: ./apps/accounting-service/Dockerfile
      target: development
    command: npm run start:dev accounting-service
    env_file:
      - ./apps/accounting-service/.env
    depends_on:
      - accounting-db
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3004:3004'

  rabbitmq:
    container_name: rabbitmq
    image: 'rabbitmq:3.8.1-management'
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      RABBIT_DEFAULT_USER: "guest"
      RABBIT_DEFAULT_PASS: "guest"
      RABBIT_DEFAULT_VHOST: "/"
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - ./rabbitmq-data:/var/lib/data
      - ./rabbitmq-data/logs:/var/log/data

  auth-db:
    image: postgres:11
    container_name: auth-db
    expose:
      - "5435"
    ports:
      - "5435:5435"
    command: -p 5435
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: auth
    volumes:
      - auth-db-data:/var/lib/postgresql/data

  accounting-db:
    image: postgres:11
    container_name: accounting-db
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: unless-stopped
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: accounting
    volumes:
      - accounting-db-data:/var/lib/postgresql/data

volumes:
  accounting-db-data:
    driver: local
  auth-db-data:
    driver: local
